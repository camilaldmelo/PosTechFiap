<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="M:API.Controllers.AcompanhamentoController.GetAll">
            <summary>
            Obtém uma lista de todos os acompanhamentos.
            </summary>
            <returns>Uma lista de acompanhamentos.</returns>
        </member>
        <member name="M:API.Controllers.AcompanhamentoController.GetById(System.Int32)">
            <summary>
            Obtém um acompanhamento com base no identificador.
            </summary>
            <param name="id">O identificador do acompanhamento desejado.</param>
            <returns>
            200 OK com o acompanhamento recuperado.
            404 Not Found se o acompanhamento não for encontrado.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.AcompanhamentoController.Post(Application.Presenters.ViewModel.AcompanhamentoViewModel)">
            <summary>
            Cria um novo acompanhamento.
            </summary>
            <param name="acompanhamento">Os dados do novo acompanhamento a ser criado.</param>
            <returns>
            201 Created juntamente com o URL do novo recurso se a criação for bem-sucedida.
            500 Internal Server Error em caso de erro inesperado no servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.AcompanhamentoController.Put(System.Int32,Application.Presenters.ViewModel.AcompanhamentoViewModel)">
            <summary>
            Atualiza um acompanhamento com base no ID especificado.
            </summary>
            <param name="id">O ID do acompanhamento a ser atualizado.</param>
            <param name="acompanhamento">Os dados do acompanhamento a serem atualizados.</param>
            <returns>
            Retorna um código de status HTTP que indica o resultado da operação:
            - 200 OK se a atualização for bem-sucedida.
            - 404 Not Found se o acompanhamento não for encontrado com o ID especificado.
            - 500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.AcompanhamentoController.Delete(System.Int32)">
            <summary>
            Exclui um acompanhamento com base no ID especificado.
            </summary>
            <param name="id">O ID do acompanhamento a ser excluído.</param>
            <returns>
            204 No Content se o acompanhamento for excluído com sucesso.
            404 Not Found se o acompanhamento não for encontrado.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.CategoriaController.GetAll">
            <summary>
            Obtém uma lista de todas as categorias.
            </summary>
            <returns>Uma lista de categorias.</returns>
        </member>
        <member name="M:API.Controllers.CategoriaController.GetById(System.Int32)">
            <summary>
            Obtém uma categoria com base no identificador.
            </summary>
            <param name="id">O identificador da categoria desejada.</param>
            <returns>
            200 OK com a categoria recuperada.
            404 Not Found se a categoria não for encontrada.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.CategoriaController.Post(Application.Presenters.ViewModel.CategoriaViewModel)">
            <summary>
            Cria uma nova categoria.
            </summary>
            <param name="categoria">Os dados da nova categoria a ser criada.</param>
            <returns>
            201 Created juntamente com o URL do novo recurso se a criação for bem-sucedida.
            500 Internal Server Error em caso de erro inesperado no servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.CategoriaController.Put(System.Int32,Application.Presenters.ViewModel.CategoriaViewModel)">
            <summary>
            Atualiza uma categoria com base no ID especificado.
            </summary>
            <param name="id">O ID da categoria a ser atualizada.</param>
            <param name="categoria">Os dados da categoria a serem atualizados.</param>
            <returns>
            Retorna um código de status HTTP que indica o resultado da operação:
            - 200 OK se a atualização for bem-sucedida.
            - 404 Not Found se a categoria não for encontrada com o ID especificado.
            - 500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.CategoriaController.Delete(System.Int32)">
            <summary>
            Exclui uma categoria com base no ID especificado.
            </summary>
            <param name="id">O ID da categoria a ser excluída.</param>
            <returns>
            204 No Content se a categoria for excluída com sucesso.
            404 Not Found se a categoria não for encontrada.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ClienteController.GetAll">
            <summary>
            Obtém uma lista de todos os clientes.
            </summary>
            <returns>
            200 OK com a lista de clientes recuperada com sucesso.
            404 Not Found se nenhum cliente for encontrado.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ClienteController.GetById(System.Int32)">
            <summary>
            Obtém um cliente com base no identificador.
            </summary>
            <param name="id">O identificador do cliente desejado.</param>
            <returns>
            200 OK com o cliente recuperado.
            404 Not Found se o cliente não for encontrado.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ClienteController.GetByCPF(System.String)">
            <summary>
            Obtém um cliente com base no CPF especificado.
            </summary>
            <param name="cpf">O CPF do cliente desejado.</param>
            <returns>
            200 OK com o cliente recuperado.
            404 Not Found se o cliente não for encontrado.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ClienteController.Post(Application.Presenters.ViewModel.ClienteViewModel)">
            <summary>
            Cria um novo cliente.
            </summary>
            <param name="cliente">Os dados do novo cliente a ser criado.</param>
            <returns>
            201 Created juntamente com o URL do novo recurso se a criação for bem-sucedida.
            500 Internal Server Error em caso de erro inesperado no servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ClienteController.Put(System.Int32,Application.Presenters.ViewModel.ClienteViewModel)">
            <summary>
            Atualiza um cliente com base no ID especificado.
            </summary>
            <param name="id">O ID do cliente a ser atualizado.</param>
            <param name="cliente">Os dados do cliente a serem atualizados.</param>
            <returns>
            Retorna um código de status HTTP que indica o resultado da operação:
            - 200 OK se a atualização for bem-sucedida.
            - 404 Not Found se o cliente não for encontrado com o ID especificado.
            - 500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ClienteController.Delete(System.Int32)">
            <summary>
            Exclui um cliente com base no ID especificado.
            </summary>
            <param name="id">O ID do cliente a ser excluído.</param>
            <returns>
            204 No Content se o cliente for excluído com sucesso.
            404 Not Found se o cliente não for encontrado.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.PagamentoController.Put(System.Int32)">
            <summary>
            Realiza o pagamento do Pedido via o QRCode do Mercado Pago (Fake).
            </summary>
        </member>
        <member name="M:API.Controllers.PagamentoController.Get(System.Int32)">
            <summary>
            Consulta o status do pagamento do Pedido (Fake).
            </summary>
        </member>
        <member name="M:API.Controllers.PagamentoController.Post(Application.Presenters.ViewModel.PagamentoViewModel)">
            <summary>
            Finaliza o pagamento do pedido.
            </summary>
            <param name="pagamento">Dados do Pagamento.</param>
            <returns>
            201 Created juntamente com o URL do novo recurso se a criação for bem-sucedida.
            500 Internal Server Error em caso de erro inesperado no servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.PedidoController.GetById(System.Int32)">
            <summary>
            Obtém um pedido por id
            </summary>
            <returns>Um pedido</returns>
        </member>
        <member name="M:API.Controllers.PedidoController.GetByIdStatus(System.Int32)">
            <summary>
            Obtém uma lista de pedidos pelo status
            </summary>
            <returns>Uma lista de pedidos</returns>
        </member>
        <member name="M:API.Controllers.PedidoController.GetInProgress">
            <summary>
            Obtém uma lista de pedidos em andamento
            </summary>
            <returns>Uma lista de pedidos</returns>
        </member>
        <member name="M:API.Controllers.PedidoController.Post(Application.Presenters.ViewModel.PedidoIncViewModel)">
            <summary>
            Cria um novo pedido
            </summary>
            <param name="pedido">Os dados do pedido a serem criados.</param>
            <returns>
            Retorna um código de status HTTP que indica o resultado da operação:
            - 200 OK se a atualização for bem-sucedida.
            - 404 Not Found se o pedido não for encontrado com o ID especificado.
            - 500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.PedidoController.PutStatus(System.Int32,System.Int32)">
            <summary>
            Atualiza o status de um pedido.
            </summary>
            <param name="idPedido">Id do pedido a ter seu status atualizão.</param>
            <param name="idStatus">Id do status que o pedido passará a ter.</param>
            <returns>
            Retorna um código de status HTTP que indica o resultado da operação:
            - 200 OK se a atualização for bem-sucedida.
            - 404 Not Found se o pedido não for encontrado com o ID especificado.
            - 500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.PedidoController.Put(Application.Presenters.ViewModel.PedidoIncViewModel)">
            <summary>
            Atualiza um pedido.
            </summary>
            <param name="pedido">Os dados do pedido a serem atualizados.</param>
            <returns>
            Retorna um código de status HTTP que indica o resultado da operação:
            - 200 OK se a atualização for bem-sucedida.
            - 404 Not Found se o pedido não for encontrado com o ID especificado.
            - 500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ProdutoController.GetAll">
            <summary>
            Obtém uma lista de todos os produtos.
            </summary>
            <returns>Uma lista de produtos.</returns>
        </member>
        <member name="M:API.Controllers.ProdutoController.GetByIdCategoria(System.Int32)">
            <summary>
            Obtém uma lista de produtos com base no identificador da categoria.
            </summary>
            <param name="idCategoria">O identificador da categoria dos produtos desejada.</param>
            <returns>Uma lista de produtos filtrados pela categoria especificada.</returns>
        </member>
        <member name="M:API.Controllers.ProdutoController.Post(Application.Presenters.ViewModel.ProdutoViewModel)">
            <summary>
            Cria um novo produto.
            </summary>
            <param name="produto">Os dados do novo produto a ser criado.</param>
            <returns>
            201 Created juntamente com o URL do novo recurso se a criação for bem-sucedida.
            500 Internal Server Error em caso de erro inesperado no servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ProdutoController.Delete(System.Int32)">
            <summary>
            Exclui um produto com base no ID especificado.
            </summary>
            <param name="id">O ID do produto a ser excluído.</param>
            <returns>
            204 No Content se o produto for excluído com sucesso.
            404 Not Found se o produto não for encontrado.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ProdutoController.GetById(System.Int32)">
            <summary>
            Obtém um produto com base no ID especificado.
            </summary>
            <param name="id">O ID do produto desejado.</param>
            <returns>
            200 OK com o produto recuperado.
            404 Not Found se o produto não for encontrado.
            500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
        <member name="M:API.Controllers.ProdutoController.Put(System.Int32,Application.Presenters.ViewModel.ProdutoViewModel)">
            <summary>
            Atualiza um produto com base no ID especificado.
            </summary>
            <param name="id">O ID do produto a ser atualizado.</param>
            <param name="produto">Os dados do produto a serem atualizados.</param>
            <returns>
            Retorna um código de status HTTP que indica o resultado da operação:
            - 200 OK se a atualização for bem-sucedida.
            - 404 Not Found se o produto não for encontrado com o ID especificado.
            - 500 Internal Server Error em caso de erro interno do servidor.
            </returns>
        </member>
    </members>
</doc>
